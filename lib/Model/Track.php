<?php
/**
 * Track
 *
 * PHP version 5
 *
 * @category Class
 * @package  OneMusicAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OneMusicAPI
 *
 * OneMusicAPI is a low cost music metadata API
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: dan@elstensoftware.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OneMusicAPI\Client\Model;

use \ArrayAccess;
use \OneMusicAPI\Client\ObjectSerializer;

/**
 * Track Class Doc Comment
 *
 * @category Class
 * @package  OneMusicAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Track implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Track';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'source_uri' => 'string',
        'title' => 'string',
        'number' => 'string',
        'artists' => 'string[]',
        'match' => '\OneMusicAPI\Client\Model\TrackMatch',
        'releases' => '\OneMusicAPI\Client\Model\TrackRelease[]',
        'uris' => 'string[]',
        'composers' => 'string[]',
        'isrc' => 'string[]',
        'score' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'source_uri' => null,
        'title' => null,
        'number' => null,
        'artists' => null,
        'match' => null,
        'releases' => null,
        'uris' => null,
        'composers' => null,
        'isrc' => null,
        'score' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'source_uri' => 'sourceUri',
        'title' => 'title',
        'number' => 'number',
        'artists' => 'artists',
        'match' => 'match',
        'releases' => 'releases',
        'uris' => 'uris',
        'composers' => 'composers',
        'isrc' => 'isrc',
        'score' => 'score'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'source_uri' => 'setSourceUri',
        'title' => 'setTitle',
        'number' => 'setNumber',
        'artists' => 'setArtists',
        'match' => 'setMatch',
        'releases' => 'setReleases',
        'uris' => 'setUris',
        'composers' => 'setComposers',
        'isrc' => 'setIsrc',
        'score' => 'setScore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'source_uri' => 'getSourceUri',
        'title' => 'getTitle',
        'number' => 'getNumber',
        'artists' => 'getArtists',
        'match' => 'getMatch',
        'releases' => 'getReleases',
        'uris' => 'getUris',
        'composers' => 'getComposers',
        'isrc' => 'getIsrc',
        'score' => 'getScore'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['source_uri'] = isset($data['source_uri']) ? $data['source_uri'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['artists'] = isset($data['artists']) ? $data['artists'] : null;
        $this->container['match'] = isset($data['match']) ? $data['match'] : null;
        $this->container['releases'] = isset($data['releases']) ? $data['releases'] : null;
        $this->container['uris'] = isset($data['uris']) ? $data['uris'] : null;
        $this->container['composers'] = isset($data['composers']) ? $data['composers'] : null;
        $this->container['isrc'] = isset($data['isrc']) ? $data['isrc'] : null;
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['source_uri'] === null) {
            $invalidProperties[] = "'source_uri' can't be null";
        }
        if ($this->container['score'] === null) {
            $invalidProperties[] = "'score' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets source_uri
     *
     * @return string
     */
    public function getSourceUri()
    {
        return $this->container['source_uri'];
    }

    /**
     * Sets source_uri
     *
     * @param string $source_uri source_uri
     *
     * @return $this
     */
    public function setSourceUri($source_uri)
    {
        $this->container['source_uri'] = $source_uri;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets artists
     *
     * @return string[]|null
     */
    public function getArtists()
    {
        return $this->container['artists'];
    }

    /**
     * Sets artists
     *
     * @param string[]|null $artists artists
     *
     * @return $this
     */
    public function setArtists($artists)
    {
        $this->container['artists'] = $artists;

        return $this;
    }

    /**
     * Gets match
     *
     * @return \OneMusicAPI\Client\Model\TrackMatch|null
     */
    public function getMatch()
    {
        return $this->container['match'];
    }

    /**
     * Sets match
     *
     * @param \OneMusicAPI\Client\Model\TrackMatch|null $match match
     *
     * @return $this
     */
    public function setMatch($match)
    {
        $this->container['match'] = $match;

        return $this;
    }

    /**
     * Gets releases
     *
     * @return \OneMusicAPI\Client\Model\TrackRelease[]|null
     */
    public function getReleases()
    {
        return $this->container['releases'];
    }

    /**
     * Sets releases
     *
     * @param \OneMusicAPI\Client\Model\TrackRelease[]|null $releases releases
     *
     * @return $this
     */
    public function setReleases($releases)
    {
        $this->container['releases'] = $releases;

        return $this;
    }

    /**
     * Gets uris
     *
     * @return string[]|null
     */
    public function getUris()
    {
        return $this->container['uris'];
    }

    /**
     * Sets uris
     *
     * @param string[]|null $uris uris
     *
     * @return $this
     */
    public function setUris($uris)
    {
        $this->container['uris'] = $uris;

        return $this;
    }

    /**
     * Gets composers
     *
     * @return string[]|null
     */
    public function getComposers()
    {
        return $this->container['composers'];
    }

    /**
     * Sets composers
     *
     * @param string[]|null $composers composers
     *
     * @return $this
     */
    public function setComposers($composers)
    {
        $this->container['composers'] = $composers;

        return $this;
    }

    /**
     * Gets isrc
     *
     * @return string[]|null
     */
    public function getIsrc()
    {
        return $this->container['isrc'];
    }

    /**
     * Sets isrc
     *
     * @param string[]|null $isrc isrc
     *
     * @return $this
     */
    public function setIsrc($isrc)
    {
        $this->container['isrc'] = $isrc;

        return $this;
    }

    /**
     * Gets score
     *
     * @return double
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param double $score score
     *
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


